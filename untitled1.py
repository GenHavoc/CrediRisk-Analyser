# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L7NbIbMO377yFu3w8o6iQXehPjWW32gG
"""

import pandas as pd

df=pd.read_excel("data.xlsx")

df.head()

df.isnull().mean()

df.shape

duplicate_mask = df.duplicated()
duplicate_mask.head()

df[duplicate_mask]

df_cleaned=df.drop_duplicates()

df.shape

df_cleaned.shape

df_cleaned = df_cleaned.convert_dtypes()
df_cleaned.info()

df_cleaned.head()

string_columns = ['name', 'location', 'rest_type', 'cuisines', 'online_order', 'book_table']
for col in string_columns:
    df_cleaned[col] = df_cleaned[col].astype(str).str.strip().str.title()

df_cleaned.head()

df_cleaned['Rating']                       = df_cleaned['Rating'].astype(float)
df_cleaned['votes']                        = df_cleaned['votes'].astype(int)
df_cleaned['approx_cost(for two people)']  = df_cleaned['approx_cost(for two people)'].astype(int)

df_cleaned.head()

df_cleaned.to_csv('cleaned_data.csv', index=False)

df_cleaned.columns = [' '.join(word.capitalize() if i == 0 else word for i, word in enumerate(col.split())) for col in df_cleaned.columns]

df_cleaned.head()

print(top_cuisines.columns.tolist())

df_cleaned['cuisine_list'] = (
    df_cleaned['cuisines']
      .str.split(',')
      .apply(lambda lst: [c.strip().title() for c in lst])
)
df_exploded = df_cleaned.explode('cuisine_list').rename(columns={'cuisine_list': 'cuisine'})

df_exploded.head()

cuisine_stats = (
    df_exploded
      .groupby('cuisine')
      .agg(
          restaurants_count=('name', 'nunique'),
          avg_rating=('Rating', 'mean'),
          avg_votes=('votes', 'mean'),
          avg_price=('approx_cost(for two people)', 'mean')
      )
      .reset_index()
      .sort_values(by=['avg_rating', 'avg_votes'], ascending=False)
)

top_cuisines = cuisine_stats[cuisine_stats['restaurants_count'] >= 10].head(10)

top_restaurants = (
    df_cleaned
      .sort_values(by='Rating', ascending=False)
      .loc[:, ['name', 'location', 'cuisines', 'Rating', 'votes', 'approx_cost(for two people)']]
      .head(10)
)

top_cuisines

import altair as alt

chart = alt.Chart(top_cuisines).mark_bar().encode(
    x=alt.X('cuisine', sort='y'),
    y='restaurants_count',
    color='cuisine',
    tooltip=['cuisine', 'restaurants_count', 'avg_rating', 'avg_votes', 'avg_price']
).properties(
    title='Number of Restaurants by Top Cuisine'
)

chart

chart_top_restaurants = alt.Chart(top_restaurants).mark_bar().encode(
    x=alt.X('name', sort='-y', title='Restaurant Name'),
    y=alt.Y('Rating', title='Rating'),
    color='name',
    tooltip=['name', 'location', 'cuisines', 'Rating', 'votes', 'approx_cost(for two people)']
).properties(
    title='Top 10 Restaurants by Rating'
)

chart_top_restaurants

top_cuisines_sorted_by_rating = top_cuisines.sort_values(by='avg_rating', ascending=False)

chart_most_liked_cuisine = alt.Chart(top_cuisines_sorted_by_rating).mark_bar().encode(
    x=alt.X('cuisine', sort='-y'),
    y=alt.Y('avg_rating', title='Average Rating'),
    color='cuisine',
    tooltip=['cuisine', 'restaurants_count', 'avg_rating', 'avg_votes', 'avg_price']
).properties(
    title='Average Rating by Top Cuisine'
)

chart_most_liked_cuisine

top_cuisines_sorted_by_votes = top_cuisines.sort_values(by='avg_votes', ascending=False)

chart_most_rated_cuisine = alt.Chart(top_cuisines_sorted_by_votes).mark_bar().encode(
    x=alt.X('cuisine', sort='-y'),
    y=alt.Y('avg_votes', title='Average Votes'),
    color='cuisine',
    tooltip=['cuisine', 'restaurants_count', 'avg_rating', 'avg_votes', 'avg_price']
).properties(
    title='Average Votes by Top Cuisine'
)

chart_most_rated_cuisine